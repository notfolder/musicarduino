/*
 * name Muscarduino.pde
 * date Thu Jul 21 22:24:34 JST 2016
 * 
 * Released under the 'Buy Me a Beer' license
 * (If we ever meet, you buy me a beer)
 */

import net.triring.emuduino.*;
import ddf.minim.AudioOutput;
// Pin割り当て
// constants won't change. They're used here to 
// set pin numbers:
int         D2 =   2;  // Switch:Push
int         D8 =   8;  // Led:Red
int         D9 =   9;  // Led:Red
int        D11 =  11;  // Led:Red
int        D12 =  12;  // Led:Red
int        D10 =  10;  // Led:Red
int        D13 =  13;  // Arduino:uno_r3

void setup() {
  initComponents();
  // initialize

     pinMode(D2,  INPUT);  // Switch:Push
     pinMode(D8, OUTPUT);  // Led:Red
     pinMode(D9, OUTPUT);  // Led:Red
     pinMode(D11, OUTPUT);  // Led:Red
     pinMode(D12, OUTPUT);  // Led:Red
     pinMode(D10, OUTPUT);  // Led:Red
     pinMode(D13, OUTPUT);  // Arduino:uno_r3
// pinMode(13, OUTPUT);
}

void loop() {
 int sw = digitalRead(D2);
 if (sw == HIGH) {
   digitalWrite(D13, HIGH);  // turn the LED on (HIGH is the voltage level)
   digitalWrite(D8, HIGH);  // turn the LED on (HIGH is the voltage level)
   delay(200);               // wait for 200 ms
 }
 digitalWrite(D8, LOW);     // turn the LED off by making the voltage LOW
 digitalWrite(D13, LOW);     // turn the LED off by making the voltage LOW
 delay(300);                 // wait for 300 ms
}

void draw() {
  loop();
}

// システムの機能を完全に停止させる禁断のメソッド
// 決して、使ってはならない。
void balse() {
  System.exit(0);
}                                            

// digital INPUT
int digitalRead(int inPin) {
    int value = 0;
    switch (inPin) {
        case 2 : value = switch2.isState(); break;
    }
    return value;
}
// digital OUTPUT
void digitalWrite(int outPin, int value) {
    switch (outPin) {
        case 8 : led8.setState(value); break;
        case 9 : led9.setState(value); break;
        case 10 : led10.setState(value); break;
        case 11 : led11.setState(value); break;
        case 12 : led12.setState(value); break;
        case 13 : arduino13.setState(value); break;
    }
}
// Speakerで使用する関数群

void tone(int pin, int frequency) {
  if (ToneFlag == frequency) return;
  ToneFlag = frequency;
  wave.setFreq((float)frequency);
  auOut.unmute();
  auOut.sound();
}

void tone(int pin, int frequency, long duration) {
  if (ToneFlag == frequency) return;
  ToneFlag = frequency;
  wave.setFreq((float)frequency);
  auOut.unmute();
  auOut.sound();
  TimerTaskAudioStop timerTask = new TimerTaskAudioStop(); //タイマータスクインスタンス作成
  //タイマー開始
  DelayTimer.schedule(timerTask, duration);
}

void noTone(int pin) {
  ToneFlag = 0;
  auOut.mute();
  auOut.noSound();
}
java.awt.Image readImage(String imgfile) {
  PImage pImage = loadImage(imgfile);
  return pImage.getImage();
}

//TimerTask内部クラス
class TimerTaskAudioStop extends java.util.TimerTask {
  public void run() {
    ToneFlag = 0;
    auOut.noSound();
    auOut.mute();
  }
}

// 指定された時間だけ停止する。単位はus
void delayMicroseconds(int t_us) {
  try {
    Thread.sleep(0, t_us * 1000);  // マイクロ秒単位の停止
  } 
  catch (InterruptedException e) {
  }
}

// 指定された時間だけ停止する。単位はms
void delay(long t_ms) {
  try {
    Thread.sleep(t_ms);  // ミリ秒単位の停止
  } 
  catch (InterruptedException e) {
  }
}

// arduino起動後の時間をus単位で返す。
long micros() {
  return (SystemStartTimeNS - System.nanoTime()) * 1000;
}

// 以下は、互換性のためだけに用意したダミー関数である。
void pinMode(int pin, int mode) {
   print("pin = " + pin + ", mode = " + mode);
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
// @SuppressWarnings("unchecked")
// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
private void initComponents() {
  ToneFlag = 0;

  // digital
                   switch2 = new Switch(2 , "Push2",    0,    0);
                      led8 = new Led(8 , "red",  720,    0);
                      led9 = new Led(9 , "red",  840,    0);
                     led10 = new Led(10 , "red",  384,  240);
                     led11 = new Led(11 , "red",  960,    0);
                     led12 = new Led(12 , "red", 1080,    0);
                 arduino13 = new Arduino(13 , "arduino13",    0,  240, "controller_arduino_uno_r3");

  

  minim = new ddf.minim.Minim(this);
  // get a line out from Minim, default bufferSize is 1024, default sample rate is 44100, bit depth is 16
  auOut = minim.getLineOut(ddf.minim.Minim.STEREO);
  // create a sine wave Oscillator, set to 440 Hz, at 0.5 amplitude, sample rate from line out
  // wave = new ddf.minim.signals.SineWave(440, 0.5, auOut.sampleRate());
  wave = new ddf.minim.signals.SquareWave(440, 0.5, auOut.sampleRate()); 
  // set the portamento speed on the oscillator to 200 milliseconds
  wave.portamento(200);

  DelayTimer = new java.util.Timer(); //タイマーインスタンス作成

  // add the oscillator to the line out
  auOut.addSignal(wave);
  auOut.noSound();  // Disables all signals currently attached to this.
  auOut.mute();
  ToneFlag = 0;

  SystemStartTimeMS = System.currentTimeMillis();  //ミリ秒で表される現在の時間を返します。
  SystemStartTimeNS = System.nanoTime(); // 利用可能でもっとも正確なシステムタイマーの現在の値をナノ秒単位で返します。
  size(320, 128);
  setLocation(0, 600);
  background(15, 115, 145);
  fill( 15, 115, 145);  rect(0, 0, 320, 128);
  fill( 30, 160, 145);  textSize(60); text(TITLE , 24, 68);
  fill( 45, 192, 145);  textSize(60); text(TITLE , 22, 66);
  fill(255, 255, 255);  textSize(60); text(TITLE , 20, 64);
  fill(255, 255, 255);  textSize(18); text("Ver. " + Arduino.getVersion(), 120, 108);
  setLocation(0, 600);
}// </editor-fold>//GEN-END:initComponents

// 変数の宣言部
// Variables declaration - do not modify//GEN-BEGIN:variables

private String TITLE   = "Emuduino";
private String VERSION = "0.49"; // Arduino.javaで使用するプロパティファイル中のバージョンを参照する。

private long SystemStartTimeMS;
private long SystemStartTimeNS;

private static final int HIGH   = 0x1;
private static final int LOW    = 0x0;
private static final int INPUT  = 0x0;
private static final int OUTPUT = 0x1;

// private static final int A0     = 0x0;
// private static final int A1     = 0x1;
// private static final int A2     = 0x2;
// private static final int A3     = 0x3;
// private static final int A4     = 0x4;
// private static final int A5     = 0x5;
// private static final int A6     = 0x6;
// private static final int A7     = 0x7;
// private static final int A8     = 0x8;
// private static final int A9     = 0x9;

private int ToneFlag = 0;  // 0の場合は停止状態。再生中は，その周波数を保持

private java.util.Timer            DelayTimer;
private java.util.TimerTask        TimerTaskAudioStop;
private ddf.minim.Minim            minim; // http://code.compartmental.net/minim/javadoc/
private ddf.minim.AudioOutput      auOut;
// private ddf.minim.signals.SawWave      wave; // A saw wave is characterized by rising edge followed by a sharp drop off.
// private ddf.minim.signals.SineWave     wave; // A sine wave is a smooth curve that oscillates between -1 and 1.
private ddf.minim.signals.SquareWave   wave; // A square wave alternates between 1 and -1 at regular intervals.
// private ddf.minim.signals.TriangleWave wave; // A triangle wave oscillates between 1 and -1 following a straight line.

private Switch switch2;
private Led led8;
private Led led9;
private Led led10;
private Led led11;
private Led led12;
private Arduino arduino13;


// End of variables declaration//GEN-END:variables


